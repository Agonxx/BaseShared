@page "/"
@page "/home"
@using Base.APP.Pages.Componentes;
@using Base.APP.Service;
@using Base.Shared.Models;
@using MudBlazor;
@using Base.Shared.Enums;

@inject IUsuarioService _usuarioService
@inject IConfiguracaoService _configuracaoService
@inject IPedidoService _pedidoService
@inject IDialogService DialogService
@inject MudThemeProvider _mudThemeProvider

<div class="sub-main-layout">

    <div style="margin:15px">
        <MudItem xs="12">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" EndIcon="@Icons.Material.Filled.Done" Style="width: 120px" OnClick="CadastrarPedido">
                Pedir
            </MudButton>
        </MudItem>
    </div>

    <div class="tabela">
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">nº</th>
                    <th scope="col">Nome</th>
                    <th scope="col">Tamanho</th>
                    <th scope="col">Sabor</th>
                    <th scope="col">Adicional</th>
                    <th scope="col">Opções</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Pedidos)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Nome</td>
                        <td>@item.Tamanho</td>
                        <td>@item.Sabor</td>
                        <td>@item.Adicional</td>
                        <td>
                            <button type="button" class="btn" @onclick="() => GerarQRCode(item)">
                                <i class="fa fa-qrcode" />
                            </button>
                            <button type="button" class="btn" @onclick="() => VisualizarPedido(item)">
                                <i class="fa fa-eye" />
                            </button>
                            <button type="button" class="btn" @onclick="() => EscluirPedido(item)">
                                <i class="fa fa-trash" />
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @* <MudDataGrid T="Usuario" Items="@Usuarios">
        <Columns>
        <PropertyColumn Property="x => x.Nome" Title="Nome" />
        <PropertyColumn Property="x => x.Apelido" Title="Apelido" />
        <PropertyColumn Property="x => x.Genero" Title="Gênero" />
        <PropertyColumn Property="x => x.Email" Title="Email" />
        </Columns>
        </MudDataGrid> *@
    </div>
</div>

<MudDialog Style="text-align:center" IsVisible="DialogVisible" OnBackdropClick="() => DialogVisible = false">
    <DialogContent>
        Falha ao cadastrar usuário
    </DialogContent>
</MudDialog>

@code {
    public List<Pedido> Pedidos { get; set; } = new();
    public Configuracao ConfiguracaoObj { get; set; } = new();
    public bool DialogVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ConfiguracaoObj = await _configuracaoService.BuscarConfiguracao();

        await AtualizaGrid();
        await base.OnInitializedAsync();

    }

    private async Task CadastrarPedido()
    {
        var parameters = new DialogParameters<CadPedidos>();
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        var retorno = await DialogService.ShowAsync<CadPedidos>("Novo pedido", parameters, options);

        if (!retorno.Result.IsCanceled)
        {
            await AtualizaGrid();
        }
    }

    public async Task AtualizaGrid()
    {
        Pedidos = await _pedidoService.BuscarPedidos();
        StateHasChanged();
    }

    private void GerarQRCode(Pedido pedido)
    {
        var total = pedido.ValorFinal + (ConfiguracaoObj.ValorEntrega / Pedidos.Count());
        var parameters = new DialogParameters<QRCode>();
        parameters.Add(x => x.QrCode, $"https://gerarqrcodepix.com.br/api/v1?nome={ConfiguracaoObj.NomePix}&cidade={ConfiguracaoObj.CidadePix}&valor={total.ToString().Replace(",", ".")}&saida=qr&chave={ConfiguracaoObj.ChavePix}");
        var options = new DialogOptions() { CloseButton = true, CloseOnEscapeKey = true, Position = DialogPosition.Center };
        DialogService.Show<QRCode>("QR Code", parameters, options);
    }

    public void VisualizarPedido(Pedido pedido)
    {
        var teste = pedido;
    }

    public void EscluirPedido(Pedido pedido)
    {
        var teste = pedido;
    }
}